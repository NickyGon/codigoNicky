AWSTemplateFormatVersion: '2010-09-09'
Transform:
- AWS::Serverless-2016-10-31
Description: My Lambda Resources
Resources:
  PutAdopterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: putAdopter
      Environment:
        Variables:
          USERS_TABLE:
            Ref: MyUsersTable
      Handler: adopters.putAdopter
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyUsersTable
      - SNSCrudPolicy:
          TopicName:
            Fn::GetAtt:
            - MySNSTopic
            - TopicName
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /adopter/{adopterId}
            Method: PUT
  GetAdopterFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getAdopter
      Environment:
        Variables:
          USERS_TABLE:
            Ref: MyUsersTable
      Handler: adopters.getAdopter
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyUsersTable
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /adopter/{adopterId}
            Method: GET
  PutAdoptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: createAdoption
      Environment:
        Variables:
          USERS_TABLE:
            Ref: MyUsersTable
      Handler: adopters.createAdoption
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyUsersTable
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /adopter/{adopterId}/animal/{animalId}
            Method: PUT
  ApproveAdoptionFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: approveAdoption
      Environment:
        Variables:
          USERS_TABLE:
            Ref: MyUsersTable
      Handler: adopters.deleteAdoption
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyUsersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MyUsersTable
      - SNSPublishMessagePolicy:
          TopicName:
            Fn::GetAtt:
            - MySNSTopic
            - TopicName
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /adopter/{adopterId}/animal/{animalId}
            Method: DELETE
  GetPetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: getAnimal
      Environment:
        Variables:
          USERS_TABLE:
            Ref: MyUsersTable
      Handler: Dogs.getPet
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Policies:
      - DynamoDBReadPolicy:
          TableName:
            Ref: MyUsersTable
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /animal/{animalId}
            Method: GET
  UpdatePetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: updateAnimal
      Environment:
        Variables:
          USERS_TABLE:
            Ref: MyUsersTable
      Handler: Dogs.updatePet
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MyUsersTable
      - S3CrudPolicy:
          BucketName:
            Ref: S3Bucket
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /animal/{animalId}
            Method: PUT
  LambdaCsvToDynamo:
    Type: AWS::Serverless::Function
    Properties:
      Handler: csv_to_dynamodb.handler
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Timeout: 10
      Policies:
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MyUsersTable
      - S3CrudPolicy:
          BucketName:
            Ref: S3Bucket
  deletePetFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: deleteAnimal
      Environment:
        Variables:
          USERS_TABLE:
            Ref: MyUsersTable
      Handler: Dogs.deletePet
      Runtime: python3.6
      CodeUri: s3://origin-1234/1f61e1599cadb72c2159930ba4cde148
      Policies:
      - DynamoDBWritePolicy:
          TableName:
            Ref: MyUsersTable
      - DynamoDBCrudPolicy:
          TableName:
            Ref: MyUsersTable
      Events:
        GetUsers:
          Type: Api
          Properties:
            RestApiId:
              Ref: MyAPI
            Path: /animal/{animalId}
            Method: DELETE
  MyAPI:
    Type: AWS::Serverless::Api
    Properties:
      Name: my-api-gateway-9
      StageName: prod
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: s3://origin-1234/7928cd5881e6c6590dee230cd1398eec
  MyUsersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: husky-app-adoption-DB
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      KeySchema:
      - AttributeName: pk
        KeyType: HASH
      - AttributeName: sk
        KeyType: RANGE
      AttributeDefinitions:
      - AttributeName: pk
        AttributeType: S
      - AttributeName: sk
        AttributeType: S
  MySNSTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: AdoptionEmailSNS
  S3Bucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: bucket-pet-api
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      VersioningConfiguration:
        Status: Enabled
      WebsiteConfiguration:
        ErrorDocument: error.html
        IndexDocument: index.html
  BucketPolicyDataSync:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket:
        Ref: S3Bucket
      PolicyDocument:
        Statement:
        - Sid: AllowAccesToIAMRole
          Action:
          - s3:GetObject
          Effect: Allow
          Resource:
            Fn::Join:
            - ''
            - - 'arn:aws:s3:::'
              - Ref: S3Bucket
              - /*
          Principal: '*'
